import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Search, Filter, X, AlertTriangle, AlertCircle, CheckCircle, ExternalLink, Info } from 'lucide-react';
import { format } from 'date-fns';
import { toast } from 'sonner';
import { getKnownExploitedVulnerabilities, getCorrelatedKnownExploits } from '@/services/api';

interface Vulnerability {
  _id: string;
  cveID: string;
  vendorProject: string;
  product: string;
  vulnerabilityName: string;
  dateAdded: string;
  shortDescription: string;
  requiredAction: string;
  dueDate: string;
  knownRansomwareCampaignUse: string;
  notes: string;
  cwes: string[];
  imported_at: string;
}

interface CorrelatedSummary {
  total_kev_vulnerabilities: number;
  total_matched_in_docker: number;
  percentage_matched: number;
  affected_images: number;
}

interface CorrelatedVuln {
  cveID: string;
  severity: string;
  packageName: string;
  imageName: string;
}

const KnownExploitedVulnerabilities: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [correlatedCVEs, setCorrelatedCVEs] = useState<string[]>([]);
  const [correlatedDetails, setCorrelatedDetails] = useState<Record<string, CorrelatedVuln[]>>({});
  const [correlationSummary, setCorrelationSummary] = useState<CorrelatedSummary | null>(null);
  const [showCorrelatedOnly, setShowCorrelatedOnly] = useState(false);
  
  // Filter states
  const [vendorFilter, setVendorFilter] = useState('');
  const [productFilter, setProductFilter] = useState('');
  const [cveFilter, setCveFilter] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  
  // Unique lists for filters
  const [uniqueVendors, setUniqueVendors] = useState<string[]>([]);
  const [uniqueProducts, setUniqueProducts] = useState<string[]>([]);
  
  useEffect(() => {
    fetchVulnerabilities();
    fetchCorrelatedVulnerabilities();
  }, []);
  
  const fetchVulnerabilities = async () => {
    try {
      setLoading(true);
      const data = await getKnownExploitedVulnerabilities();
      setVulnerabilities(data);
      
      // Extract unique vendors and products with proper type casting
      const vendors = [...new Set(data.map((v: Vulnerability) => v.vendorProject))] as string[];
      const products = [...new Set(data.map((v: Vulnerability) => v.product))] as string[];
      setUniqueVendors(vendors);
      setUniqueProducts(products);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
      toast.error('Failed to fetch vulnerabilities');
    } finally {
      setLoading(false);
    }
  };

  const fetchCorrelatedVulnerabilities = async () => {
    try {
      const correlatedData = await getCorrelatedKnownExploits();
      
      // Extract all CVE IDs that appear in Docker images
      const cveList = correlatedData.correlated_vulnerabilities.map((vuln: CorrelatedVuln) => vuln.cveID);
      setCorrelatedCVEs([...new Set(cveList)] as string[]);
      
      // Group correlated vulnerabilities by CVE ID
      const detailsByCVE: Record<string, CorrelatedVuln[]> = {};
      correlatedData.correlated_vulnerabilities.forEach((vuln: CorrelatedVuln) => {
        if (!detailsByCVE[vuln.cveID]) {
          detailsByCVE[vuln.cveID] = [];
        }
        detailsByCVE[vuln.cveID].push(vuln);
      });
      setCorrelatedDetails(detailsByCVE);
      
      setCorrelationSummary(correlatedData.summary);
    } catch (err) {
      console.error('Failed to fetch correlated vulnerabilities:', err);
    }
  };
  
  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    // Apply the "Show only matched in Docker" filter if enabled
    if (showCorrelatedOnly && !correlatedCVEs.includes(vuln.cveID)) {
      return false;
    }
    
    const matchesVendor = !vendorFilter || vendorFilter === 'all' || vuln.vendorProject === vendorFilter;
    const matchesProduct = !productFilter || productFilter === 'all' || vuln.product === productFilter;
    const matchesCve = !cveFilter || vuln.cveID.toLowerCase().includes(cveFilter.toLowerCase());
    const matchesSearch = !searchQuery || 
      Object.values(vuln).some(value => 
        typeof value === 'string' && 
        value.toLowerCase().includes(searchQuery.toLowerCase())
      );
    
    return matchesVendor && matchesProduct && matchesCve && matchesSearch;
  });
  
  const resetFilters = () => {
    setVendorFilter('');
    setProductFilter('');
    setCveFilter('');
    setSearchQuery('');
    setShowCorrelatedOnly(false);
  };
  
  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMM dd, yyyy');
    } catch {
      return dateString;
    }
  };
  
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-red-500">{error}</div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Known Exploited Vulnerabilities Catalog</h1>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            onClick={resetFilters}
            className="text-sm"
            disabled={!vendorFilter && !productFilter && !cveFilter && !searchQuery && !showCorrelatedOnly}
          >
            <X className="mr-2 h-4 w-4" />
            Clear Filters
          </Button>
        </div>
      </div>
      
      {/* Summary Statistics */}
      {correlationSummary && (
        <Card className="bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-900">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center gap-2">
              <Info className="h-5 w-5 text-blue-500" />
              <span className="text-blue-700 dark:text-blue-300">Correlation with Docker Images</span>
            </CardTitle>
            <CardDescription className="text-blue-600 dark:text-blue-400">
              {correlationSummary.total_matched_in_docker} out of {correlationSummary.total_kev_vulnerabilities} vulnerabilities ({correlationSummary.percentage_matched}%) found in your Docker images
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-5 w-5 text-red-500" />
                <div>
                  <p className="text-sm font-medium">Vulnerabilities in Docker</p>
                  <p className="text-xl font-bold text-red-600">{correlationSummary.total_matched_in_docker}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <AlertCircle className="h-5 w-5 text-orange-500" />
                <div>
                  <p className="text-sm font-medium">Affected Images</p>
                  <p className="text-xl font-bold text-orange-600">{correlationSummary.affected_images}</p>
                </div>
              </div>
              
              <div className="flex justify-end">
                <Button 
                  variant={showCorrelatedOnly ? "default" : "outline"}
                  className={showCorrelatedOnly ? "bg-blue-600 hover:bg-blue-700" : "text-blue-600 border-blue-300 hover:border-blue-400"}
                  onClick={() => setShowCorrelatedOnly(!showCorrelatedOnly)}
                >
                  {showCorrelatedOnly ? "Showing Matched Only" : "Show Matched in Docker"}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Search</label>
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search all fields..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Vendor/Project</label>
              <Select value={vendorFilter} onValueChange={setVendorFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="Select vendor" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Vendors</SelectItem>
                  {uniqueVendors.map(vendor => (
                    <SelectItem key={vendor} value={vendor}>{vendor}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Product</label>
              <Select value={productFilter} onValueChange={setProductFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="Select product" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Products</SelectItem>
                  {uniqueProducts.map(product => (
                    <SelectItem key={product} value={product}>{product}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">CVE ID</label>
              <Input
                placeholder="Search CVE ID..."
                value={cveFilter}
                onChange={(e) => setCveFilter(e.target.value)}
              />
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Results */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">
            Results ({filteredVulnerabilities.length} vulnerabilities)
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="border rounded-lg">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Status</TableHead>
                  <TableHead>CVE ID</TableHead>
                  <TableHead>Vendor/Project</TableHead>
                  <TableHead>Product</TableHead>
                  <TableHead>Vulnerability Name</TableHead>
                  <TableHead>Date Added</TableHead>
                  <TableHead>Due Date</TableHead>
                  <TableHead>Ransomware</TableHead>
                  <TableHead>CWEs</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredVulnerabilities.map((vuln) => {
                  const isInDocker = correlatedCVEs.includes(vuln.cveID);
                  const dockerDetails = correlatedDetails[vuln.cveID] || [];
                  
                  return (
                    <TableRow 
                      key={vuln._id} 
                      className={`group hover:bg-muted/50 ${isInDocker ? 'bg-red-50 dark:bg-red-950/20' : ''}`}
                    >
                      <TableCell>
                        {isInDocker ? (
                          <div className="relative group/tooltip">
                            <AlertTriangle className="h-5 w-5 text-red-500" />
                            <div className="absolute left-0 top-full z-50 p-2 rounded-md bg-black/90 text-white text-xs w-80 invisible group-hover/tooltip:visible">
                              <p className="font-bold mb-1">Found in {dockerDetails.length} Docker images:</p>
                              <ul className="space-y-1 text-xs">
                                {dockerDetails.map((detail, idx) => (
                                  <li key={idx} className="flex items-start">
                                    <span className="mr-1">•</span>
                                    <div>
                                      <div className="font-medium">{detail.imageName}</div>
                                      <div className="text-gray-300">Package: {detail.packageName} ({detail.severity} severity)</div>
                                    </div>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        ) : (
                          <CheckCircle className="h-5 w-5 text-green-500" />
                        )}
                      </TableCell>
                      <TableCell className="font-medium">
                        <a 
                          href={`https://nvd.nist.gov/vuln/detail/${vuln.cveID}`} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="flex items-center hover:underline"
                        >
                          {vuln.cveID}
                          <ExternalLink size={12} className="ml-1 inline" />
                        </a>
                      </TableCell>
                      <TableCell>{vuln.vendorProject}</TableCell>
                      <TableCell>{vuln.product}</TableCell>
                      <TableCell>
                        <div className="max-w-md">
                          <div className="font-medium">{vuln.vulnerabilityName}</div>
                          <div className="text-sm text-muted-foreground mt-1 group-hover:block hidden">
                            {vuln.shortDescription}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>{formatDate(vuln.dateAdded)}</TableCell>
                      <TableCell>{formatDate(vuln.dueDate)}</TableCell>
                      <TableCell>
                        <Badge variant={vuln.knownRansomwareCampaignUse.toLowerCase() !== 'unknown' ? 'destructive' : 'secondary'}>
                          {vuln.knownRansomwareCampaignUse}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1 flex-wrap">
                          {vuln.cwes.map((cwe, index) => (
                            <Badge key={`${vuln._id}-${index}`} variant="outline">{cwe}</Badge>
                          ))}
                        </div>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default KnownExploitedVulnerabilities; 