import React, { useEffect, useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ReloadIcon, ChevronDownIcon, ChevronRightIcon, MagnifyingGlassIcon, CrossCircledIcon } from "@radix-ui/react-icons";
import { getDockerVulnerabilities } from '../services/api';
import { toast } from 'sonner';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface Vulnerability {
  VulnerabilityID: string;
  PkgName: string;
  InstalledVersion: string;
  Severity: string;
  Title: string;
  Description: string;
  PrimaryURL: string;
}

interface ImageVulnerability {
  _id: string;
  image_uri: string;
  region: string;
  repository: string;
  scan_time: string;
  vulnerabilities: Array<{
    Target: string;
    Class: string;
    Type: string;
    Vulnerabilities: Vulnerability[];
  }>;
}

type SeverityType = 'ALL' | 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';

const getSeverityColor = (severity: string) => {
  const colors = {
    CRITICAL: 'bg-red-400/80',
    HIGH: 'bg-orange-400/80',
    MEDIUM: 'bg-amber-400/80',
    LOW: 'bg-blue-400/80',
    UNKNOWN: 'bg-gray-400/80'
  };
  return colors[severity.toUpperCase()] || colors.UNKNOWN;
};

const getSeverityStyles = (severity: string) => {
  const styles = {
    CRITICAL: 'bg-red-400/20 text-red-400 border-red-400/30',
    HIGH: 'bg-orange-400/20 text-orange-400 border-orange-400/30',
    MEDIUM: 'bg-amber-400/20 text-amber-400 border-amber-400/30',
    LOW: 'bg-blue-400/20 text-blue-400 border-blue-400/30',
    UNKNOWN: 'bg-gray-400/20 text-gray-400 border-gray-400/30'
  };
  return styles[severity.toUpperCase()] || styles.UNKNOWN;
};

// Add a helper function to get vulnerability counts by severity
const getVulnerabilityCounts = (imageVuln: ImageVulnerability) => {
  const counts = {
    CRITICAL: 0,
    HIGH: 0,
    MEDIUM: 0,
    LOW: 0,
    UNKNOWN: 0
  };

  imageVuln.vulnerabilities?.forEach(group => {
    group.Vulnerabilities?.forEach(vuln => {
      const severity = vuln.Severity?.toUpperCase() || 'UNKNOWN';
      if (counts.hasOwnProperty(severity)) {
        counts[severity as keyof typeof counts]++;
      } else {
        counts.UNKNOWN++;
      }
    });
  });

  return counts;
};

const DockerVulnerability = () => {
  const [loading, setLoading] = useState(true);
  const [vulnerabilities, setVulnerabilities] = useState<ImageVulnerability[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState<SeverityType>('ALL');
  const [openImageStates, setOpenImageStates] = useState<Record<string, boolean>>({});
  
  // New filter states
  const [repositories, setRepositories] = useState<string[]>([]);
  const [osVersions, setOsVersions] = useState<string[]>([]);
  const [selectedRepository, setSelectedRepository] = useState<string>('ALL');
  const [selectedOsVersion, setSelectedOsVersion] = useState<string>('ALL');
  const [selectedImage, setSelectedImage] = useState<string>('ALL');
  const [images, setImages] = useState<string[]>([]);

  const fetchVulnerabilities = async () => {
    try {
      setLoading(true);
      const data = await getDockerVulnerabilities();
      setVulnerabilities(data);
      
      // Initialize open states for all images
      const initialOpenStates: Record<string, boolean> = {};
      data.forEach((img: ImageVulnerability) => {
        initialOpenStates[img._id] = true; // All expanded by default
      });
      setOpenImageStates(initialOpenStates);
      
      // Extract unique repositories, OS versions and images for filters
      const repoSet = new Set<string>();
      const osVersionSet = new Set<string>();
      const imageSet = new Set<string>();
      
      data.forEach(img => {
        if (img.repository) repoSet.add(img.repository);
        
        // Extract OS version from vulnerability target
        img.vulnerabilities?.forEach(vulnGroup => {
          const targetParts = vulnGroup.Target.split('(');
          if (targetParts.length > 1) {
            const osVersionPart = targetParts[1].split(')')[0].trim();
            if (osVersionPart) osVersionSet.add(osVersionPart);
          }
        });
        
        // Extract image name from the URI
        const imageName = img.image_uri.split('/').pop() || '';
        if (imageName) imageSet.add(imageName);
      });
      
      setRepositories(Array.from(repoSet).sort());
      setOsVersions(Array.from(osVersionSet).sort());
      setImages(Array.from(imageSet).sort());
      
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
      toast.error('Failed to fetch vulnerabilities');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const toggleImageCollapse = (imageId: string) => {
    setOpenImageStates(prev => ({
      ...prev,
      [imageId]: !prev[imageId]
    }));
  };

  const setAllExpanded = (expanded: boolean) => {
    const newOpenStates: Record<string, boolean> = {};
    vulnerabilities.forEach(img => {
      newOpenStates[img._id] = expanded;
    });
    setOpenImageStates(newOpenStates);
  };
  
  const resetFilters = () => {
    setSearchQuery('');
    setSelectedSeverity('ALL');
    setSelectedRepository('ALL');
    setSelectedOsVersion('ALL');
    setSelectedImage('ALL');
  };

  const filteredVulnerabilities = vulnerabilities
    .filter(imageVuln => {
      // Filter by repository
      if (selectedRepository !== 'ALL' && imageVuln.repository !== selectedRepository) {
        return false;
      }
      
      // Filter by image name
      const imageName = imageVuln.image_uri.split('/').pop() || '';
      if (selectedImage !== 'ALL' && imageName !== selectedImage) {
        return false;
      }
      
      // Filter by OS version - check if any vulnerability group matches the selected OS
      if (selectedOsVersion !== 'ALL') {
        const matchesOsVersion = imageVuln.vulnerabilities?.some(vulnGroup => {
          const targetParts = vulnGroup.Target.split('(');
          if (targetParts.length > 1) {
            const osVersionPart = targetParts[1].split(')')[0].trim();
            return osVersionPart === selectedOsVersion;
          }
          return false;
        });
        
        if (!matchesOsVersion) return false;
      }
      
      return true;
    })
    .map(imageVuln => {
      // Filter vulnerabilities based on severity and search query
      const filteredVulnGroups = imageVuln.vulnerabilities?.map(vulnGroup => {
        // Filter by OS version at the group level
        if (selectedOsVersion !== 'ALL') {
          const targetParts = vulnGroup.Target.split('(');
          const hasMatchingOs = targetParts.length > 1 && 
                               targetParts[1].split(')')[0].trim() === selectedOsVersion;
          
          if (!hasMatchingOs) return { ...vulnGroup, Vulnerabilities: [] };
        }
        
        const filteredVulns = vulnGroup.Vulnerabilities?.filter(vuln => {
          const matchesSeverity = selectedSeverity === 'ALL' || vuln.Severity === selectedSeverity;
          const matchesSearch = 
            searchQuery === '' || 
            vuln.VulnerabilityID.toLowerCase().includes(searchQuery.toLowerCase()) ||
            vuln.PkgName.toLowerCase().includes(searchQuery.toLowerCase()) ||
            (vuln.Description && vuln.Description.toLowerCase().includes(searchQuery.toLowerCase())) ||
            (vuln.Title && vuln.Title.toLowerCase().includes(searchQuery.toLowerCase()));
          
          return matchesSeverity && matchesSearch;
        });
        
        return {
          ...vulnGroup,
          Vulnerabilities: filteredVulns
        };
      }).filter(group => group.Vulnerabilities.length > 0);
      
      return {
        ...imageVuln,
        vulnerabilities: filteredVulnGroups
      };
    }).filter(image => image.vulnerabilities.length > 0);

  const hasActiveFilters = searchQuery !== '' || 
                         selectedSeverity !== 'ALL' || 
                         selectedRepository !== 'ALL' || 
                         selectedOsVersion !== 'ALL' ||
                         selectedImage !== 'ALL';

  return (
    <div className="p-6 flex-1 overflow-auto">
      {/* Header section */}
      <div className="mb-6 flex justify-between items-center">
        <h2 className="text-xl font-semibold">Docker Image Vulnerabilities</h2>
        <Button
          variant="outline"
          onClick={fetchVulnerabilities}
          disabled={loading}
          className="flex items-center gap-2"
        >
          {loading ? (
            <ReloadIcon className="h-4 w-4 animate-spin" />
          ) : (
            <ReloadIcon className="h-4 w-4" />
          )}
          Refresh
        </Button>
      </div>

      {/* Filters and search */}
      <div className="mb-6 space-y-3">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-grow">
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <Input
              placeholder="Search by vulnerability ID, package, or description..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => setAllExpanded(true)} className="whitespace-nowrap">
              Expand All
            </Button>
            <Button variant="outline" onClick={() => setAllExpanded(false)} className="whitespace-nowrap">
              Collapse All
            </Button>
          </div>
        </div>
        
        <div className="flex flex-wrap gap-2">
          <Select
            value={selectedSeverity}
            onValueChange={(value) => setSelectedSeverity(value as SeverityType)}
          >
            <SelectTrigger className="w-[150px]">
              <SelectValue placeholder="Severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="ALL">All Severities</SelectItem>
              <SelectItem value="CRITICAL">Critical</SelectItem>
              <SelectItem value="HIGH">High</SelectItem>
              <SelectItem value="MEDIUM">Medium</SelectItem>
              <SelectItem value="LOW">Low</SelectItem>
            </SelectContent>
          </Select>
          
          <Select
            value={selectedRepository}
            onValueChange={setSelectedRepository}
          >
            <SelectTrigger className="w-[150px]">
              <SelectValue placeholder="Repository" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="ALL">All Repositories</SelectItem>
              {repositories.map(repo => (
                <SelectItem key={repo} value={repo}>{repo}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          
          <Select
            value={selectedImage}
            onValueChange={setSelectedImage}
          >
            <SelectTrigger className="w-[150px]">
              <SelectValue placeholder="Image" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="ALL">All Images</SelectItem>
              {images.map(image => (
                <SelectItem key={image} value={image}>{image}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          
          <Select
            value={selectedOsVersion}
            onValueChange={setSelectedOsVersion}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="OS Version" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="ALL">All OS Versions</SelectItem>
              {osVersions.map(os => (
                <SelectItem key={os} value={os}>{os}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          
          {hasActiveFilters && (
            <Button 
              variant="ghost" 
              size="sm"
              onClick={resetFilters}
              className="flex items-center gap-1"
            >
              <CrossCircledIcon className="h-4 w-4" />
              Clear Filters
            </Button>
          )}
        </div>
      </div>

      {/* Results count */}
      <div className="mb-4 text-sm text-muted-foreground">
        Found {filteredVulnerabilities.length} images with matching vulnerabilities
      </div>

      {/* Results list */}
      {filteredVulnerabilities.map((imageVuln) => {
        const vulnCounts = getVulnerabilityCounts(imageVuln);
        return (
          <div key={imageVuln._id} className="mb-3">
            <Card className="overflow-hidden border border-border">
              <div 
                className="w-full flex justify-between items-center p-3 rounded-none text-left hover:bg-muted/50 cursor-pointer"
                onClick={() => toggleImageCollapse(imageVuln._id)}
              >
                <div className="flex items-center gap-2">
                  {openImageStates[imageVuln._id] ? 
                    <ChevronDownIcon className="h-4 w-4" /> : 
                    <ChevronRightIcon className="h-4 w-4" />}
                  <span className="text-base font-medium">
                    {imageVuln.image_uri.split('/').pop()}
                  </span>
                  <span className="text-sm text-muted-foreground mx-2">
                    {imageVuln.repository}
                  </span>
                </div>
                <div className="flex gap-2">
                  {vulnCounts.CRITICAL > 0 && (
                    <Badge variant="outline" className="bg-red-400/20 text-red-400 border-red-400/30">
                      {vulnCounts.CRITICAL} Critical
                    </Badge>
                  )}
                  {vulnCounts.HIGH > 0 && (
                    <Badge variant="outline" className="bg-orange-400/20 text-orange-400 border-orange-400/30">
                      {vulnCounts.HIGH} High
                    </Badge>
                  )}
                  {vulnCounts.MEDIUM > 0 && (
                    <Badge variant="outline" className="bg-amber-400/20 text-amber-400 border-amber-400/30">
                      {vulnCounts.MEDIUM} Medium
                    </Badge>
                  )}
                  {vulnCounts.LOW > 0 && (
                    <Badge variant="outline" className="bg-blue-400/20 text-blue-400 border-blue-400/30">
                      {vulnCounts.LOW} Low
                    </Badge>
                  )}
                </div>
              </div>
              {openImageStates[imageVuln._id] && (
                <CardContent className="pt-4 pb-4">
                  <div className="text-sm text-muted-foreground mb-4">
                    <p>Full URI: {imageVuln.image_uri}</p>
                    <p>Region: {imageVuln.region}</p>
                    <p>Scan Time: {new Date(imageVuln.scan_time).toLocaleString()}</p>
                  </div>
                  
                  {imageVuln.vulnerabilities?.map((vulnGroup, groupIndex) => (
                    <div key={`${imageVuln._id}-group-${groupIndex}`} className="mb-6">
                      <div className="mb-2">
                        <h4 className="text-md font-medium">{vulnGroup.Target}</h4>
                        <div className="text-sm text-muted-foreground">
                          {vulnGroup.Class} | {vulnGroup.Type}
                        </div>
                      </div>

                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Vulnerability ID</TableHead>
                            <TableHead>Package</TableHead>
                            <TableHead>Version</TableHead>
                            <TableHead>Severity</TableHead>
                            <TableHead>Description</TableHead>
                            <TableHead className="w-[100px]"></TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {vulnGroup.Vulnerabilities?.map((vuln) => (
                            <TableRow key={`${imageVuln._id}-${vuln.VulnerabilityID}`}>
                              <TableCell className="font-mono">{vuln.VulnerabilityID}</TableCell>
                              <TableCell>{vuln.PkgName}</TableCell>
                              <TableCell>{vuln.InstalledVersion}</TableCell>
                              <TableCell>
                                <Badge variant="outline" className={getSeverityStyles(vuln.Severity)}>
                                  {vuln.Severity}
                                </Badge>
                              </TableCell>
                              <TableCell className="max-w-md truncate">
                                {vuln.Description || vuln.Title}
                              </TableCell>
                              <TableCell>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => window.open(vuln.PrimaryURL, '_blank')}
                                >
                                  Details
                                </Button>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  ))}
                </CardContent>
              )}
            </Card>
          </div>
        );
      })}

      {loading && (
        <div className="flex justify-center items-center p-8">
          <ReloadIcon className="h-8 w-8 animate-spin" />
        </div>
      )}

      {!loading && filteredVulnerabilities.length === 0 && (
        <div className="text-center p-8">
          <p className="text-muted-foreground">No vulnerabilities found matching your criteria</p>
        </div>
      )}
    </div>
  );
};

export default DockerVulnerability; 