import subprocess
import json
import boto3
import pymongo
from datetime import datetime
import os

# Load Configuration from config.json
def load_config():
    """Load configuration from config.json."""
    try:
        with open("config.json", "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Error loading config file: {e}")
        return {}

config = load_config()
selected_regions = config.get("regions", [])

# Initialize AWS & MongoDB Clients
sts_client = boto3.client("sts")
aws_account_id = sts_client.get_caller_identity()["Account"]

# MongoDB Setup
mongo_client = pymongo.MongoClient(os.getenv("MONGO_URI", "mongodb://gandiva-mongo:27017/"))  # Update if needed
db = mongo_client["cspm"]
collection = db["docker_image_vulnerability"]

def authenticate_ecr(region):
    """Authenticate Docker with AWS ECR for a given region."""
    try:
        ecr_client = boto3.client("ecr", region_name=region)
        auth_response = ecr_client.get_authorization_token()
        registry_url = auth_response["authorizationData"][0]["proxyEndpoint"]

        cmd = f"aws ecr get-login-password --region {region} | docker login --username AWS --password-stdin {registry_url.replace('https://', '')}"
        subprocess.run(cmd, shell=True, check=True)
        print(f"‚úÖ Authenticated with ECR in {region}")
        return registry_url, ecr_client
    except Exception as e:
        print(f"‚ùå Error authenticating with ECR in {region}: {e}")
        return None, None

def get_ecr_repositories(ecr_client):
    """Fetch all ECR repositories in the given region."""
    try:
        response = ecr_client.describe_repositories()
        return [repo["repositoryName"] for repo in response.get("repositories", [])]
    except Exception as e:
        print(f"‚ùå Error fetching ECR repositories: {e}")
        return []

def get_ecr_images(ecr_client, repository_name):
    """Fetch all images in an ECR repository."""
    try:
        response = ecr_client.list_images(repositoryName=repository_name)
        return [img["imageTag"] for img in response.get("imageIds", []) if "imageTag" in img]
    except Exception as e:
        print(f"‚ùå Error fetching images from {repository_name}: {e}")
        return []

def pull_docker_image(region, repository_name, image_tag):
    """Pull image from ECR to local Docker."""
    image_uri = f"{aws_account_id}.dkr.ecr.{region}.amazonaws.com/{repository_name}:{image_tag}"
    try:
        print(f"üöÄ Pulling image: {image_uri}")
        subprocess.run(["docker", "pull", image_uri], check=True)
        return image_uri
    except Exception as e:
        print(f"‚ùå Error pulling image {image_uri}: {e}")
        return None

def run_trivy_scan(image_uri):
    """Run Trivy vulnerability scan on the image."""
    try:
        cmd = ["trivy", "image", "--format", "json", image_uri]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        scan_output = json.loads(result.stdout)
        return scan_output
    except Exception as e:
        print(f"‚ùå Error scanning image {image_uri}: {e}")
        return None

def store_scan_result(image_uri, region, repository, scan_result):
    """Store Trivy scan result in MongoDB."""
    try:
        document = {
            "image_uri": image_uri,
            "region": region,
            "repository": repository,
            "scan_time": datetime.utcnow(),
            "vulnerabilities": scan_result.get("Results", []),
        }
        collection.insert_one(document)
        print(f"‚úÖ Stored scan result for {image_uri} in MongoDB")
    except Exception as e:
        print(f"‚ùå Error storing scan result for {image_uri}: {e}")

def main():
    """Main function to authenticate, pull images, scan them, and store results."""
    if not selected_regions:
        print("‚ùå No regions specified in config.json. Exiting.")
        return
    
    for region in selected_regions:
        print(f"\nüîç Scanning region: {region}")
        registry_url, ecr_client = authenticate_ecr(region)
        if not registry_url or not ecr_client:
            continue

        repositories = get_ecr_repositories(ecr_client)
        for repo in repositories:
            images = get_ecr_images(ecr_client, repo)
            for image_tag in images:
                image_uri = pull_docker_image(region, repo, image_tag)
                if image_uri:
                    print(f"üîç Scanning image: {image_uri} ...")
                    scan_result = run_trivy_scan(image_uri)
                    if scan_result:
                        store_scan_result(image_uri, region, repo, scan_result)

if __name__ == "__main__":
    main()
